name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tigu_backend_fastapi/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'tigu_backend_fastapi/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.11'
  WORKING_DIRECTORY: './tigu_backend_fastapi'

jobs:
  # Job 1: Code Quality & Linting
  lint-and-format:
    name: üîç Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install -r requirements.txt
      
      - name: Run Black (formatting check)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: black --check --diff .
        continue-on-error: true
      
      - name: Run flake8 (linting)
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: flake8 . --count --max-line-length=88 --statistics
        continue-on-error: true

  # Job 2: API Tests
  test:
    name: üß™ API Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [auth, products, orders, companies]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: tigu_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests - ${{ matrix.test-type }}
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DATABASE_URL: sqlite:///./test.db
          TESTING: true
          SECRET_KEY: test-secret-key-for-ci
        run: |
          chmod +x run_tests.sh
          ./run_tests.sh -t ${{ matrix.test-type }} -v
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            ${{ env.WORKING_DIRECTORY }}/test_results/

  # Job 3: Full Integration Test
  integration-test:
    name: üîó Integration Test
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run full test suite
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DATABASE_URL: sqlite:///./test.db
          TESTING: true
          SECRET_KEY: test-secret-key-for-ci
        run: |
          chmod +x run_tests.sh
          ./run_tests.sh -t all -v -o integration_results
      
      - name: Upload integration results
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: integration-test-results
          path: |
            ${{ env.WORKING_DIRECTORY }}/integration_results/

  # Job 4: Deploy
  deploy:
    name: üöÄ Deploy Backend
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.BACKEND_DEPLOY_HOST }}
          username: ${{ secrets.BACKEND_DEPLOY_USER }}
          key: ${{ secrets.BACKEND_DEPLOY_SSH_KEY }}
          port: ${{ secrets.BACKEND_DEPLOY_PORT || 22 }}
          script: |
            echo "üöÄ Deploying Tigu Backend API..."
            
            # Navigate to backend directory
            cd ${{ secrets.BACKEND_DEPLOY_PATH || '/var/www/tigu_backend' }}
            
            # Pull latest changes
            git pull origin main
            
            # Activate virtual environment and install dependencies
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Run database migrations
            cd tigu_backend_fastapi
            alembic upgrade head
            
            # Restart backend service
            sudo systemctl restart tigu-backend
            sudo systemctl reload nginx
            
            # Health check
            sleep 10
            curl -f http://localhost:8000/health || echo "‚ö†Ô∏è Health check failed"
            
            echo "‚úÖ Backend deployment completed!" 