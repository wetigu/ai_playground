name: Frontend CI/CD

on:
  # Automatic triggers
  push:
    branches: [ main, dev ]
    paths:
      - 'tigu_frontend_vue/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'tigu_frontend_vue/**'
  
  # Manual trigger with inputs
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - development
      
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'dev'
        type: string
      
      skip_tests:
        description: 'Skip tests (for hotfixes)'
        required: false
        default: false
        type: boolean
      
      deploy_only:
        description: 'Only run deployment (skip build)'
        required: false
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    # Skip tests if manually requested
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Use input branch if manually triggered
        ref: ${{ github.event.inputs.branch || github.ref }}
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: tigu_frontend_vue/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./tigu_frontend_vue
    
    - name: Run linting
      run: npm run lint
      working-directory: ./tigu_frontend_vue
    
    - name: Run unit tests
      run: npm run test:unit
      working-directory: ./tigu_frontend_vue
    
    - name: Run type checking
      run: npm run type-check
      working-directory: ./tigu_frontend_vue
    
    - name: Build application
      run: npm run build
      working-directory: ./tigu_frontend_vue
      env:
        # Use environment from input
        NODE_ENV: ${{ github.event.inputs.environment == 'production' && 'production' || 'development' }}
    
    - name: Upload build artifacts
      # Skip this step when running locally with act
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v4
      with:
        name: dist-files-${{ matrix.node-version }}
        path: tigu_frontend_vue/dist/
        retention-days: 7
  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    # Skip if tests are skipped or deploy_only is true
    if: ${{ !inputs.skip_tests && !inputs.deploy_only }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: tigu_frontend_vue/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./tigu_frontend_vue
    
    - name: Install Cypress
      run: npx cypress install
      working-directory: ./tigu_frontend_vue
    
    - name: Build application
      run: npm run build
      working-directory: ./tigu_frontend_vue
    
    - name: Start application
      run: npm run preview &
      working-directory: ./tigu_frontend_vue
    
    - name: Wait for application to start
      run: npx wait-on http://localhost:4173
      working-directory: ./tigu_frontend_vue
    
    - name: Run Cypress e2e tests
      run: npx cypress run
      working-directory: ./tigu_frontend_vue
      env:
        CYPRESS_baseUrl: http://localhost:4173
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      # Skip when running locally with act, only run on GitHub
      if: failure() && !env.ACT
      with:
        name: cypress-screenshots
        path: tigu_frontend_vue/cypress/screenshots/
    
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      # Skip when running locally with act, only run on GitHub
      if: failure() && !env.ACT
      with:
        name: cypress-videos
        path: tigu_frontend_vue/cypress/videos/
  deploy-manual:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    # Only run for manual triggers and allow if test/e2e jobs are skipped or successful
    if: github.event_name == 'workflow_dispatch' && always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: tigu_frontend_vue/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./tigu_frontend_vue
    
    - name: Build application
      if: ${{ !inputs.deploy_only }}
      run: npm run build
      working-directory: ./tigu_frontend_vue
      env:
        NODE_ENV: ${{ github.event.inputs.environment == 'production' && 'production' || 'development' }}
    
        # Setup SSH Keys for deployment
    - name: Setup SSH Keys
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/staging_key
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/prod_key
        echo "${{ secrets.DEV_SSH_KEY }}" > ~/.ssh/dev_key
        chmod 600 ~/.ssh/staging_key ~/.ssh/prod_key ~/.ssh/dev_key
        
        # Add server host keys to known_hosts to avoid prompts
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H ${{ secrets.DEV_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

    - name: Deploy to Staging
      if: github.event.inputs.environment == 'staging'
      run: |
        echo "üöÄ Deploying to STAGING environment"
        echo "Branch: ${{ github.event.inputs.branch }}"
        echo "Target: ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:${{ secrets.STAGING_PATH }}"
        
        # Deploy files using rsync over SSH
        rsync -avz --delete --progress \
          -e "ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no" \
          ./tigu_frontend_vue/dist/ \
          ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:${{ secrets.STAGING_PATH }}/
        
        # Optional: Reload web server
        echo "üîÑ Reloading web server..."
        ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no \
          ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} \
          "sudo systemctl reload nginx || sudo service nginx reload || true"
        
        echo "‚úÖ Successfully deployed to STAGING!"
        echo "üåê Visit: https://${{ secrets.STAGING_HOST }}"

    - name: Deploy to Production
      if: github.event.inputs.environment == 'production'
      run: |
        echo "üöÄ Deploying to PRODUCTION environment"
        echo "Branch: ${{ github.event.inputs.branch }}"
        echo "Target: ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:${{ secrets.PRODUCTION_PATH }}"
        
        # Create backup before deployment
        echo "üì¶ Creating backup..."
        ssh -i ~/.ssh/prod_key -o StrictHostKeyChecking=no \
          ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} \
          "cp -r ${{ secrets.PRODUCTION_PATH }} ${{ secrets.PRODUCTION_PATH }}_backup_$(date +%Y%m%d_%H%M%S) || true"
        
        # Deploy files using rsync over SSH
        rsync -avz --delete --progress \
          -e "ssh -i ~/.ssh/prod_key -o StrictHostKeyChecking=no" \
          ./tigu_frontend_vue/dist/ \
          ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:${{ secrets.PRODUCTION_PATH }}/
        
        # Reload web server
        echo "üîÑ Reloading web server..."
        ssh -i ~/.ssh/prod_key -o StrictHostKeyChecking=no \
          ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} \
          "sudo systemctl reload nginx || sudo service nginx reload"
        
        echo "‚úÖ Successfully deployed to PRODUCTION!"
        echo "üåê Visit: https://${{ secrets.PRODUCTION_HOST }}"

    - name: Deploy to Development
      if: github.event.inputs.environment == 'development'
      run: |
        echo "üöÄ Deploying to DEVELOPMENT environment"
        echo "Branch: ${{ github.event.inputs.branch }}"
        echo "Target: ${{ secrets.DEV_USER }}@${{ secrets.DEV_HOST }}:${{ secrets.DEV_PATH }}"
        
        # Deploy files using rsync over SSH
        rsync -avz --delete --progress \
          -e "ssh -i ~/.ssh/dev_key -o StrictHostKeyChecking=no" \
          ./tigu_frontend_vue/dist/ \
          ${{ secrets.DEV_USER }}@${{ secrets.DEV_HOST }}:${{ secrets.DEV_PATH }}/
        
        # Optional: Reload web server
        echo "üîÑ Reloading web server..."
        ssh -i ~/.ssh/dev_key -o StrictHostKeyChecking=no \
          ${{ secrets.DEV_USER }}@${{ secrets.DEV_HOST }} \
          "sudo systemctl reload nginx || sudo service nginx reload || true"
        
        echo "‚úÖ Successfully deployed to DEVELOPMENT!"
        echo "üåê Visit: https://${{ secrets.DEV_HOST }}"
    
    - name: Notify deployment
      run: |
        echo "‚úÖ Manual deployment completed!"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Branch: ${{ github.event.inputs.branch }}"
        echo "Tests skipped: ${{ github.event.inputs.skip_tests }}"
  deploy-preview:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    # Only for automatic PR triggers
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: tigu_frontend_vue/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./tigu_frontend_vue
    
    - name: Build application
      run: npm run build
      working-directory: ./tigu_frontend_vue
      env:
        NODE_ENV: production
    
    - name: Deploy to Netlify (Preview)
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './tigu_frontend_vue/dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    # Only for automatic main branch pushes
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: tigu_frontend_vue/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./tigu_frontend_vue
    
    - name: Build application
      run: npm run build
      working-directory: ./tigu_frontend_vue
      env:
        NODE_ENV: production
    
    - name: Deploy to production
      run: |
        echo "Deploy to your production server here"
        echo "Example: rsync, FTP, or cloud deployment"
      # Replace with your actual deployment commands
    
    - name: Notify deployment success
      run: |
        echo "‚úÖ Frontend deployed successfully to production!"
        echo "üöÄ Application is now live"
